//堆排序： 时间复杂度O(N*N)，额外空间复杂度O(1)
//1.堆结构的heapInsert 和 heapify
//2.堆结构的增大与减少
//3.如果只是建立堆的过程，时间复杂度为O(N)
//4.优先级队列结构，就是堆结构。堆就是完全二叉树
public class HeapSort {
    public static void main(String[] array) {
        if (array == null || array.length < 2) return;
        for (int i = 0; i < array.length; i++) {
            heapInsert(array, i);
        }
        int size = array.length;
        swap(array, 0, --size);
        while (size > 0) {
            heapify(array, 0, size);
            swap(array, 0, --size);
        }
    }

    public static void heapInsert(int[] arr, int index) {
        while (arr[index] > arr[(index - 1) / 2]) {
            swap(arr, index, (index - 1) / 2);
            index = (index - 1) / 2;
        }
    }

    public static void heapify(int[] arr, int index, int size) {
        int left = index * 2 + 1;
        while (left < size) {
            int largest = left + 1 < size && arr[left + 1] > arr[left] ? left + 1 : left;
            largest = arr[largest] > arr[index] ? largest : index;
            if (largest == index) break;
            swap(arr, largest, index);
            index = largest;
            left = index * 2 + 1;
        }
    }

    public static void swap(int[] array, int i, int j) {
        int tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
    }
}
