//归并排序 时间复杂度O(N*logN)   额外空间复杂度O(N)   思路：分治
public class MergeSort {
    public static void mergeSort(int[] array) {
        if (array == null || array.length < 2) return;
        sortProcess(array, 0, array.length - 1);
    }

    public static void sortProcess(int[] array, int L, int R) {
        if (L == R) return;
        int mid = L + ((R - L) >> 1);  //位运算较快，右移= 除以2
        sortProcess(array, L, mid);
        sortProcess(array, mid + 1, R);
        mergeSort(array, L, mid, R);
    }

    public static void mergeSort(int[] array, int L, int mid, int R) {
        int[] help = new int[R - L + 1];
        int i = 0, p1 = L, p2 = mid + 1;
        while (p1 <= mid && p2 <= R) {
            help[i++] = array[p1] < array[p2] ? array[p1++] : array[p2++];
        }
        while (p1 <= mid) help[i++] = array[p1++];
        while (p2 <= R) help[i++] = array[p2++];
        for (int i = 0; i < help.length; i++) {
            array[L + i] = help[i];
        }
    }
}

//小和问题 归并排序
public class SmallSum {
    public static int smallSum(int[] arr) {
        if (arr == null || arr.length < 2) return 0;
        return mergeSort(arr, 0, arr.length - 1);
    }

    public static int mergeSort(int[] arr, int L, int R) {
        if (L == R) return 0;
        int mid = L + ((R - L) >> 1);
        return mergeSort(arr, L, mid) + mergeSort(arr, mid + 1, R) + merge(arr, L, mid, R);
    }

    public static int merge(int[] arr, int l, int m, int r) {
        int[] help = new int[r - l + 1];
        int i = 0, p1 = l, p2 = mid + 1, res = 0;
        while (p1 <= m && p2 <= r) {
            res += arr[p1] < arr[p2] ? (r - p2 + 1) * arr[p1] : 0;
            help[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];
        }
        while (p1 <= m) help[i++] = arr[p1++];
        while (p2 <= r) help[i++] = arr[p2++];
        for (int i = 0; i < help.length; i++) {
            arr[L + i] = help[i];
        }
        return res;
    }
}