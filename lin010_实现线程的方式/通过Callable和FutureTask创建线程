//a:创建Callable接口的实现类 ，并实现Call方法
//b:创建Callable实现类的实现，使用FutureTask类包装Callable对象，该FutureTask对象封装了Callable对象的Call方法的返回值
//c:使用FutureTask对象作为Thread对象的target创建并启动线程
//d:调用FutureTask对象的get()来获取子线程执行结束的返回值

public class Thread3 {
    public static void main(String[] args) {
        Callable<Object> myCallable = new SomeCallable<Object>();
        FutureTask<Object> futureTask = new FutureTask<Object>(myCallable);
        Thread thread = new Thread(futureTask);
        System.out.println(Thread.currentThread().getName());
        thread.start();
    }
}

public class SomeCallable<Object> implements Callable<Object> {
    //重写Call方法
    @Override
    public Object Call() throws Exception {
        System.out.println(Thread.currentThread().getName() + "-->通过实现Callable接口和FutureTask包装器来实现的线程");
        return null;
    }
}